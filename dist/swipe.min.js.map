{"version":3,"sources":["swipe.js"],"names":["root","global","axis","x","y","fireEvent","el","name","detail","ev","CustomEvent","err","createEvent","initEvent","dispatchEvent","Swipe","selector","options","_this","this","els","sensitivity","timeOut","document","querySelectorAll","toString","Object","prototype","call","slice","getList","forEach","push","eventType","addEventListener","event","time","timeStamp","target","touches","length","pageX","pageY","eventPoint","touchstart","touchmove","swipeAmount","Math","abs","swipeAxis","swipeDirection","eventName","concat","direction","toLowerCase","duration","distance","on","callback","window","jQuery","fn","arguments","undefined","get"],"mappings":"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","file":"swipe.min.js","sourcesContent":["/*!\n* Swipe detector - v1.0.0\n*\n* Copyright (C) 2021 https://github.com/Waldir\n* Author: Waldir Bolanos\n*/\n(function f(root) {\n    let global = {};\n    root = root || {};\n\n    // Axis object for quick direction finding.\n    const axis = {\n        x: ['Left', 'Right'],\n        y: ['Up', 'Down'],\n    };\n\n    /**\n     * event point\n     */\n    function eventPoint(event) {\n        const ev = {\n            time:   event.timeStamp,\n            target: event.target,\n        };\n        if (event.touches && event.touches.length > 0) {\n            ev.x = event.touches[0].pageX;\n            ev.y = event.touches[0].pageY;\n        } else {\n            ev.x = event.pageX;\n            ev.y = event.pageY;\n        }\n        return ev;\n    }\n\n    /**\n     * Get the axis of the swipe\n     * @param {int} x x position.\n     * @param {int} y y position\n     * @returns String\n     */\n    function getAxis(x, y) {\n        return x > y ? 'x' : 'y';\n    }\n\n    /**\n    * Gets an iterable element for the passed elements\n    */\n    function getList(selector) {\n        const toString = Object.prototype.toString.call(selector);\n        if (toString === '[object HTMLCollection]' || toString === '[object NodeList]')\n            return [].slice.call(selector);\n        if (toString === '[object Array]')\n            return selector;\n        return [selector];\n    }\n\n    function fireEvent(el, name, detail) {\n        let ev;\n        try {\n            ev = new CustomEvent(name, { detail });\n        } catch (err) {\n            // IE supported event.\n            ev = el.createEvent('Event');\n            ev.initEvent(name, true, true);\n            ev.detail = detail;\n        }\n        el.dispatchEvent(ev);\n    }\n\n    function Swipe(selector, options) {\n        this.els = [];\n        options = options || {};\n        options.sensitivity = options.sensitivity || 20;\n        options.timeOut = options.timeOut || 500;\n\n        // If no selector is found just exit.\n        if (!selector)\n            return this;\n\n        // If this is a string, use querySelectorAll.\n        if (typeof selector === 'string')\n            selector = document.querySelectorAll(selector);\n\n        getList(selector).forEach((el) => { this.els.push(el); });\n\n        // Iterate through all found elements\n        this.els.forEach((el) => {\n            // Add Event listeners to touchstart and touchmove and add to global\n            ['touchstart', 'touchmove'].forEach((eventType) => {\n                el.addEventListener(eventType, (event) => {\n                    global[eventType] = eventPoint(event);\n                }, false);\n            });\n\n            // Do the logic at the end of the touch.\n            el.addEventListener('touchend', () => {\n                if (global.touchstart && global.touchmove) {\n                    // Add swipeAmount object to global.\n                    global.swipeAmount = {\n                        x:    Math.abs(global.touchstart.x - global.touchmove.x),\n                        y:    Math.abs(global.touchstart.y - global.touchmove.y),\n                        time: Math.abs(global.touchmove.time - global.touchstart.time),\n                    };\n\n                    // Find the swipe axis.\n                    global.swipeAxis = getAxis(global.swipeAmount.x, global.swipeAmount.y);\n\n                    // If the sensitivity and time are correct, proceed to add event.\n                    if (global.swipeAmount[global.swipeAxis] > options.sensitivity && global.swipeAmount.time < options.timeOut) {\n                        // get direction from axis object.\n                        global.swipeDirection = global.touchstart[global.swipeAxis] > global.touchmove[global.swipeAxis]\n                            ? axis[global.swipeAxis][0]\n                            : axis[global.swipeAxis][1];\n\n                        // Create variables with name and timestamp.\n                        const eventName = `swipe${global.swipeDirection}`;\n                        const detail = {\n                            direction: global.swipeDirection.toLowerCase(),\n                            duration:  global.swipeAmount.time,\n                            distance:  global.swipeAmount[global.swipeAxis],\n                        };\n\n                        // Fire events.\n                        fireEvent(el, eventName, detail);\n                        fireEvent(el, 'swipe', detail);\n                    }\n\n                    // Remove global objects.\n                    global = {};\n                }\n            }, false);\n        });\n\n        return this;\n    }\n\n    /**\n     *\n     * @param {String} event the event to trigger\n     * @param {Function} callback callback function to fire\n     * @returns Swipe Object\n     */\n    Swipe.prototype.on = function f(event, callback) {\n        this.els.forEach((el) => {\n            el.addEventListener(event, callback, false);\n        });\n        return this;\n    };\n\n    // Add jQuery plugin.\n    if (window.jQuery) {\n        (function f($) {\n            $.fn.Swipe = function f(options = {}) {\n                Swipe(this.get(), options);\n                return this;\n            };\n        }(window.jQuery));\n    }\n\n    // Bring plugin out into the root (window).\n    root.Swipe = Swipe;\n}(typeof window === 'object' ? window : this));\n"]}